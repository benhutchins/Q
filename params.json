{"name":"Q","tagline":"Extremely simple non-intrusive native DOM helper.","body":"# Q\r\n\r\nExtremely simple non-intrusive native DOM helper. For those who don't need jQuery but need quick development.\r\n\r\nQ provides an alternative to libraries like [jQuery](http://jquery.com) and [Mootools](http://mootools.net) that is simple to use and doesn't bloat your namespace or attempt to deal with the \"finer points\" of web development.\r\n\r\n## How to use\r\n\r\nThe `Q` method returns a native Element object. It does not override any native methods\r\n\r\n### Create an element\r\n\r\nTo create a new element by type (essentially a wrapper for `document.createElement`):\r\n\r\n\tvar el = Q('div');\r\n\r\nTo wrap an element you already have with the Q utilities:\r\n\r\n\tvar el = Q(document.body);\r\n\r\nTo perform a selector for a single element:\r\n\r\n\tvar el = Q('#')\r\n\r\nTo create an empty `div` element, simply do:\r\n\r\n\tvar el = Q();\r\n\r\n### .css\r\n\r\nA utility to set CSS styling properties.\r\n\r\n\t.css('margin', 'none');\r\n\r\nOr to set multiple CSS styling properties at once.\r\n\r\n\t.css({\r\n\t\tmargin: 'none',\r\n\t\tpaddingLeft: '10px'\r\n\t});\r\n\r\n### .set\r\n\r\nSet an attribute property value. See Special Properties below.\r\n\r\n\t.set('id', 'something');\r\n\r\nOr to set multiple attributes at once.\r\n\r\n\t.set({\r\n\t\tid: 'something',\r\n\t\thref: 'http://github.com/',\r\n\t\ttext: 'Github'\r\n\t})\r\n\r\n### .get\r\n\r\nGet an attribute property value. See Special Properties below.\r\n\r\n\t.get('id');\r\n\r\n### .on\r\n\r\nAdd an event listener.\r\n\r\n\t.on('click', clickEventCallback);\r\n\r\nOr to add multiple events at one.\r\n\r\n\t.on({\r\n\t\tmousedown: function(){},\r\n\t\tmouseup: function(){}\r\n\t});\r\n\r\n### .off\r\n\r\nRemove an event listener.\r\n\r\n\t.off('click', clickEventCallback);\r\n\r\nOr to remove multiple events at one.\r\n\r\n\t.off({\r\n\t\tmousedown: onMouseDownCallback,\r\n\t\tmouseup: onMouseUpCallback\r\n\t});\r\n\r\n### .adopt\r\n\r\nTo append descendant elements.\r\n\r\n\t.adopt(document.createElement('div'));\r\n\r\nYou can also append a Q element directly.\r\n\r\n\t.adopt(Q('div'))\r\n\r\nYou can also append a list of elements.\r\n\r\n\t.adopt([Q(), Q(), Q()]);\r\n\r\nOr you can pass the list directly as arguments.\r\n\r\n\t.adopt(Q(), Q(), Q());\r\n\r\n## Special Properties\r\n\r\n### text\r\n\r\nTo insert text content.\r\n\r\n\t.set('text', 'Text safe, this string will be HTML-escaped. <a href=\"\"></a>');\r\n\r\nTo get the text content for a node.\r\n\r\n\t.get('text');\r\n\r\n### html\r\n\r\nTo set the raw inner HTML value of the element.\r\n\r\n\t.set('html', 'HTML stuff, like <a href=\"\"></a>');\r\n\r\nTo get the inner HTML value of an element.\r\n\r\n\t.get('html');\r\n\r\n### Add custom special property\r\n\r\nThere is a special object `Q.properties` which is an object of special property keywords. The value of these is an object containing a `set` and `get` function. To add a custom special property.\r\n\r\n\tQ.properties.width = {\r\n\t\tset: function (value) {\r\n\t\t\t// 'this' will be the element\r\n\t\t\tthis.css('width', value + 'px');\r\n\t\t},\r\n\r\n\t\tget: function () {\r\n\t\t\treturn this.clientWidth;\r\n\t\t}\r\n\t};\r\n\r\nThis is extremely extensible.","google":"UA-49219744-1","note":"Don't delete this file! It's used internally to help with page regeneration."}