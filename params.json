{"name":"Q","tagline":"Extremely simple non-intrusive native DOM helper.","body":"# Q\r\n\r\nExtremely simple non-intrusive native DOM helper. For those who don't need jQuery but need quick development.\r\n\r\nQ provides an alternative to libraries like [jQuery](http://jquery.com) and [Mootools](http://mootools.net) that is simple to use and doesn't bloat your namespace or attempt to deal with the \"finer points\" of web development.\r\n\r\n## How to use\r\n\r\nThe `Q` method returns a native Element object. It does not override any native methods. This makes it useful when interacting with the native DOM API. It also allows Q to be used alongside essentially any other framework.\r\n\r\n### Create an element\r\n\r\nTo create a new element by type (essentially a wrapper for `document.createElement`):\r\n\r\n\tvar el = Q('<div>');\r\n\r\nTo wrap an element you already have with Q.\r\n\r\n\tvar el = Q(document.body);\r\n\r\nBy default, Q will return a new empty `div` element.\r\n\r\n\tvar el = Q();\r\n\r\n### Find an element\r\n\r\nTo perform a selector for a single element:\r\n\r\n\tvar el = Q(selector);\r\n\r\nTo find a list of elements that match a given selector:\r\n\r\n\tvar els = Q(document.body).search(selector);\r\n\r\n### CSS and styling manipulation\r\n\r\n#### .css(property, value)\r\n\r\nA utility to set CSS styling properties.\r\n\r\n\t.css('margin', 'none');\r\n\r\nOr to set multiple CSS styling properties at once.\r\n\r\n\t.css({\r\n\t\tmargin: 'none',\r\n\t\tpaddingLeft: '10px'\r\n\t});\r\n\r\n### .css(property)\r\n\r\nReturn the computed style for the requested property.\r\n\r\n#### .hide()\r\n\r\nSet the `display` CSS property to `none` to render the the element hidden.\r\n\r\n#### .show()\r\n\r\nReset the `display` CSS property of the element to the element's default state.\r\n\r\n#### .addClass(class)\r\n\r\nAdd a class to the element.\r\n\r\n\t.addClass('example');\r\n\r\nAdd multiple classes to the element.\r\n\r\n\t.addClsas(['one', 'two']); // with an array\r\n\t.addClass('one', 'two'); // with arguments\r\n\t.addClass('one two'); // with whitespace\r\n\r\n#### .hasClass(class)\r\n\r\nReturns a boolean to indicate whether the element has the given class.\r\n\r\n\t.hasClass('example');\r\n\r\nReturns a boolean to indicate whether the element has all the given classes.\r\n\r\n\t.hasClass(['one', 'two']);\r\n\t.hasClass('one', 'two');\r\n\t.hsaClass('one two');\r\n\r\n#### .removeClass(class)\r\n\r\nRemove a class from the element.\r\n\r\n\t.removeClass('example');\r\n\r\nRemove multiple classes from the element.\r\n\r\n\t.removeClass(['one', 'two']); // with an array\r\n\t.removeClass('one', 'two'); // with arguments\r\n\t.removeClass('one two'); // with whitespace\r\n\r\n#### .toggleClass(class)\r\n\r\nAdd or remove class from the element, depending on whether the element already has the given class.\r\n\r\n\t.toggleClass(class);\r\n\r\nAdd or remove multiple classes from the element, depending on whether the element already has the given class.\r\n\r\n\t.toggleClass(['one', 'two']); // with an array \r\n\t.toggleClass('one', 'two'); // with arguments\r\n\t.toggleClass('one two'); // with whitespace\r\n\r\n### Element attributes and properties\r\n\r\n#### .set\r\n\r\nSet an attribute value.\r\n\r\n\t.set('id', 'something');\r\n\r\nSet multiple attributes.\r\n\r\n\t.set({\r\n\t\tid: 'something',\r\n\t\thref: 'http://github.com/',\r\n\t\ttext: 'Github'\r\n\t})\r\n\r\n#### .get\r\n\r\nGet an attribute value.\r\n\r\n\t.get('id');\r\n\r\n#### Special properties\r\n\r\n##### text\r\n\r\nTo insert text content.\r\n\r\n\t.set('text', 'Text safe, this string will be HTML-escaped. <a href=\"\"></a>');\r\n\r\nTo get the text content for a node.\r\n\r\n\t.get('text');\r\n\r\n##### html\r\n\r\nTo set the raw inner HTML value of the element.\r\n\r\n\t.set('html', 'HTML stuff, like <a href=\"\"></a>');\r\n\r\nTo get the inner HTML value of an element.\r\n\r\n\t.get('html');\r\n\r\n##### .get('outerHTML')\r\n\r\nGet the outerHTML of an element.\r\n\r\n##### .get('tag')\r\n\r\nGet the element tag in lower case.\r\n\r\n#### .get('offsetHeight')\r\n\r\nReturn the element's offset height.\r\n\r\n#### .get('outerHeight')\r\n\r\nReturn the element's offset height with top and bottom margins summed.\r\n\r\n#### .get('outerWidth')\r\n\r\nReturn the element's offset height with the left and right margins summed.\r\n\r\n##### Add custom special property\r\n\r\nThere is a special object `Q.properties` which is an object of special property keywords. The value of these is an object containing a `set` and `get` function. To add a custom special property.\r\n\r\n\tQ.properties.width = {\r\n\t\tset: function (value) {\r\n\t\t\t// 'this' will be the element\r\n\t\t\tthis.css('width', value + 'px');\r\n\t\t},\r\n\r\n\t\tget: function () {\r\n\t\t\treturn this.clientWidth;\r\n\t\t}\r\n\t};\r\n\r\nThis is extremely extensible.\r\n\r\n### Events\r\n\r\n#### .on(event, callback)\r\n\r\nAdd an event listener.\r\n\r\n\t.on('click', clickEventCallback);\r\n\r\nAdd multiple event listeners at once.\r\n\r\n\t.on({\r\n\t\tmousedown: function(){},\r\n\t\tmouseup: function(){}\r\n\t});\r\n\r\n#### .once(event, callback)\r\n\r\nAdd an event listener that is automatically removed after the first trigger.\r\n\r\n\t.once('click', oneTimeOffer);\r\n\r\nAdd multiple event listeners that are automatically removed after the first trigger.\r\n\r\n\t.once({\r\n\t\tmousedown: onMouseDownCallback,\r\n\t\tmouseup: onMouseUpCallback\r\n\t})\r\n\r\n#### .off(event, callback)\r\n\r\nRemove an event listener.\r\n\r\n\t.off('click', clickEventCallback);\r\n\r\nRemove multiple event listeners at once.\r\n\r\n\t.off({\r\n\t\tmousedown: onMouseDownCallback,\r\n\t\tmouseup: onMouseUpCallback\r\n\t});\r\n\r\n#### Special events\r\n\r\n##### ready\r\n\r\nA special `ready` event is an alias to `DOMContentLoaded`.\r\n\r\n##### Create your own 'special' events\r\n\r\nSpecial events allow for events to be manipulated in various ways. TODO: document special event features.\r\n\r\n### DOM Traversal\r\n\r\n#### .find(selector)\r\n\r\nFind a descending element that matches given selector. Returns either a single element or null.\r\n\r\n#### .search(selector)\r\n\r\nReturns list of elements matching given selector. May return an empty list if no matching elements are found.\r\n\r\n#### .search(selector, forEach[, filter])\r\n\r\nPerform a callback event, `forEach`, for each element matching the selector. An optional `filter` argument can be passed to further filter the elements prior to the `forEach` callback being triggered.\r\n\r\n### DOM Insertions\r\n\r\n#### .inject(element)\r\n\r\nTo append descendant elements as last child of parent.\r\n\r\n\t.inject(document.createElement('div'));\r\n\r\nThis is equivalent to.\r\n\r\n\t.inject('append', element);\r\n\r\nAlias.\r\n\r\n\t.append(element);\r\n\r\nTo append multiple descending elements.\r\n\r\n\t.inject([Q(), Q(), Q()]); // with an array\r\n\t.inject([ [Q(), Q()], [Q()], Q() ]); // flattens array of arguments and injects them all\r\n\t.inject(Q(), Q(), Q()); // with arguments\r\n\r\n#### .inject('prepend', element)\r\n\r\nPrepend an element as the first child of parent.\r\n\r\n\t.inject('prepend', document.createElement('div'));\r\n\r\nAlias.\r\n\r\n\t.prepend(document.createElement('div'));\r\n\r\n#### .inject('after', element);\r\n\r\nInject context element after the passed element.\r\n\r\n\t.inject('after', element);\r\n\r\nAlias\r\n\r\n\t.after(element);\r\n\r\n#### .inject('before', element);\r\n\r\nInject context element before the given element.\r\n\r\n\t.inject('before', element);\r\n\r\nAlias\r\n\r\n\t.before(element);\r\n\r\n### Element utilities\r\n\r\n#### .matches(selector)\r\n\r\nReturns a boolean to indicate whether the element matches the given selector.\r\n\r\n#### .clone()\r\n\r\nSimple wrapper for `element.cloneNode(true);`. Returns a clone of the element.\r\n\r\n#### .contains(otherNode)\r\n\r\nReturns a boolean to indicate if the given `otherNode` is a descendant of the context element. [Read more on spec](https://developer.mozilla.org/en-US/docs/Web/API/Node.contains).\r\n\r\n#### .offset()\r\n\r\nReturns the element's offset position similar to jQuery's [.offset](http://api.jquery.com/offset/) as an object similar to `{ left: 0, top: 0 }`.\r\n\r\n#### .position()\r\n\r\nReturns the element's offset location as an object similar to `{ left: 0, top: 0 }`. Similar to jQuery's [.position](http://api.jquery.com/position/).\r\n\r\n#### .siblings()\r\n\r\nReturns an array of the element's siblings.\r\n\r\n## Special Methods\r\n\r\nTo add custom methods to each Q return element, there is a utility similar to jQuery's `$.fn`.\r\n\r\n\tQ.fn.method = function () {\r\n\t\t// this will be a single element\r\n\t};\r\n\r\nNow to call your method, simply:\r\n\r\n\t.method();","google":"UA-49219744-1","note":"Don't delete this file! It's used internally to help with page regeneration."}